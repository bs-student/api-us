<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * QuoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuoteRepository extends EntityRepository
{


    function getAllStudentQuoteSearchResult($searchQuery, $pageNumber, $pageSize,$sort){

        $firstResult = ($pageNumber - 1) * $pageSize;
        $qb= $this->getEntityManager()
            ->createQueryBuilder('q')
            ->select('q.id as quoteId,
                      q.quoteType,
                      q.quoteDescription,
                      q.quoteStatus,
                      q.quoteProvider,
                      q.quoteImage
            ')
            ->from('AppBundle:Quote', 'q')
            ->andwhere('q.quoteProvider LIKE :query ')
            ->andwhere('q.quoteType='."'Student'")
            ->setParameter('query', '%' . $searchQuery . '%')
            ->setMaxResults($pageSize)
            ->setFirstResult($firstResult);

        foreach($sort as  $key => $value){
            $qb->addOrderBy("q.".$key,$value);
        }
        return $qb->getQuery()
            ->getResult();

    }


    public function getAllStudentQuoteSearchNumber($searchQuery)
    {
        return $this->getEntityManager()
            ->createQueryBuilder('q')
            ->select('COUNT(q)')
            ->from('AppBundle:Quote', 'q')
            ->andwhere('q.quoteProvider LIKE :query ')
            ->andwhere('q.quoteType='."'Student'")
            ->setParameter('query', '%' . $searchQuery . '%')
            ->getQuery()
            ->getSingleScalarResult();
    }

    function getAllUniversityQuoteSearchResult($searchQuery, $pageNumber, $pageSize,$sort){

        $firstResult = ($pageNumber - 1) * $pageSize;
        $qb= $this->getEntityManager()
            ->createQueryBuilder('q')
            ->select('q.id as quoteId,
                      q.quoteType,
                      q.quoteDescription,
                      q.quoteStatus,
                      q.quoteProvider,
                      q.quoteImage
            ')
            ->from('AppBundle:Quote', 'q')
            ->andwhere('q.quoteProvider LIKE :query ')
            ->andwhere('q.quoteType='."'University'")
            ->setParameter('query', '%' . $searchQuery . '%')
            ->setMaxResults($pageSize)
            ->setFirstResult($firstResult);

        foreach($sort as  $key => $value){
            $qb->addOrderBy("q.".$key,$value);
        }
        return $qb->getQuery()
            ->getResult();

    }


    public function getAllUniversityQuoteSearchNumber($searchQuery)
    {
        return $this->getEntityManager()
            ->createQueryBuilder('q')
            ->select('COUNT(q)')
            ->from('AppBundle:Quote', 'q')
            ->andwhere('q.quoteProvider LIKE :query ')
            ->andwhere('q.quoteType='."'University'")
            ->setParameter('query', '%' . $searchQuery . '%')
            ->getQuery()
            ->getSingleScalarResult();
    }

    function getActivatedStudentQuotes(){

        return $this->getEntityManager()
            ->createQueryBuilder('q')
            ->select('q.id as id,
                      q.quoteType as peopleType,
                      q.quoteDescription as peopleQuote,
                      q.quoteStatus,
                      q.quoteProvider as peopleName,
                      q.quoteImage as peopleImg
            ')
            ->from('AppBundle:Quote', 'q')
            ->andwhere('q.quoteType='."'Student'")
            ->andwhere('q.quoteStatus='."'Activated'")
            ->getQuery()
            ->getResult();

    }

    function getActivatedUniversityQuotes(){

        return $this->getEntityManager()
            ->createQueryBuilder('q')
            ->select('q.id as id,
                      q.quoteType,
                      q.quoteDescription as universityQuote,
                      q.quoteStatus,
                      q.quoteProvider as universityName,
                      q.quoteImage as universityImg
            ')
            ->from('AppBundle:Quote', 'q')
            ->andwhere('q.quoteType='."'University'")
            ->andwhere('q.quoteStatus='."'Activated'")
            ->getQuery()
            ->getResult();

    }

}
