<?php

namespace AppBundle\Repository;

/**
 * UniversityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UniversityRepository extends \Doctrine\ORM\EntityRepository
{

    public function getUniversitySearchResults($searchQuery)
    {
        return $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select('u.universityName')

            ->from('AppBundle:University', 'u')
            ->andwhere('u.universityName LIKE :query ')
            ->setParameter('query', '%' . $searchQuery . '%')
            ->getQuery()
            ->getResult();
    }

    public function getAllUniversities()
    {

        return $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select('u.id as universityId, u.universityName,u.universityUrl,u.universityStatus')
            ->from('AppBundle:University', 'u')
            ->getQuery()
            ->getResult();

    }

    public function getUniversitySearchResultNumberAdmin($searchQuery)
    {
        return $this->getEntityManager()->createQueryBuilder('u')
            ->select('COUNT(u)')
            ->from('AppBundle:University', 'u')

            ->andwhere('u.universityName LIKE :query ')
            ->setParameter('query', '%' . $searchQuery . '%')

            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getUniversitySearchResultAdmin($searchQuery, $page_number, $page_size)
    {
        $firstResult = ($page_number - 1) * $page_size;

        return $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select('u.id as universityId, u.universityName,u.universityUrl,u.universityStatus')
            ->from('AppBundle:University', 'u')

            ->andwhere('u.universityName LIKE :query ')
            ->setParameter('query', '%' . $searchQuery . '%')
            ->setMaxResults($page_size)
            ->setFirstResult($firstResult)
            ->getQuery()
            ->getResult();
    }

    public function getActivatedUniversitySearchResults($searchQuery)
    {

        return $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select('c.id as campusId, u.universityName, c.campusName, s.stateShortName, co.countryName')

            ->from('AppBundle:University', 'u')

            ->innerJoin('AppBundle:Campus', 'c', 'WITH', 'u.id = c.university')
            ->innerJoin('AppBundle:State', 's', 'WITH', 's.id = c.state')
            ->innerJoin('AppBundle:Country', 'co', 'WITH', 'co.id = s.country')
            ->andwhere('u.universityStatus=\'Activated\'')
            ->andwhere('c.campusName LIKE :query OR u.universityName LIKE :query OR co.countryName LIKE :query OR s.stateName LIKE :query')

            ->setParameter('query', '%' . $searchQuery . '%')
            ->getQuery()
            ->getResult();


    }

    function getAllNonApprovedUniversitiesSearchResult($searchQuery, $pageNumber, $pageSize, $sort)
    {
        $firstResult = ($pageNumber - 1) * $pageSize;
        $qb = $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select("u.id as universityId,
                      u.universityName,
                      u.universityUrl,
                      u.universityStatus,
                      u.adminApproved,
                      u.creationDateTime")

            ->from('AppBundle:University', 'u')
            ->andwhere('u.adminApproved = ' . "'No'")
            ->andwhere('u.universityName LIKE :query ')
            ->setParameter('query', '%' . $searchQuery . '%');


        foreach ($sort as $key => $value) {
            $qb->addOrderBy("u." . $key, $value);
        }


        return $qb->setMaxResults($pageSize)
            ->setFirstResult($firstResult)
            ->getQuery()
            ->getResult();
    }

    function getAllNonApprovedUniversitiesSearchNumber($searchQuery)
    {
        return $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select("count(u)")

            ->from('AppBundle:University', 'u')
            ->andwhere('u.adminApproved = ' . "'No'")
            ->andwhere('u.universityName LIKE :query ')
            ->setParameter('query', '%' . $searchQuery . '%')

            ->getQuery()
            ->getSingleScalarResult();

    }


    function getAllActivatedUniversitiesSearchResult($searchQuery, $pageNumber, $pageSize, $sort)
    {
        $firstResult = ($pageNumber - 1) * $pageSize;
        $qb = $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select("u.id as universityId,
                      u.universityName,
                      u.universityUrl,
                      u.universityStatus,
                      u.adminApproved,
                      u.creationDateTime")

            ->from('AppBundle:University', 'u')
            ->andwhere('u.adminApproved = ' . "'Yes'")
            ->andwhere('u.universityStatus = ' . "'Activated'")
            ->andwhere('u.universityName LIKE :query ')
            ->setParameter('query', '%' . $searchQuery . '%');


        foreach ($sort as $key => $value) {
            $qb->addOrderBy("u." . $key, $value);
        }


        return $qb->setMaxResults($pageSize)
            ->setFirstResult($firstResult)
            ->getQuery()
            ->getResult();
    }

    function getAllActivatedUniversitiesSearchNumber($searchQuery)
    {
        return $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select("count(u)")

            ->from('AppBundle:University', 'u')
            ->andwhere('u.adminApproved = ' . "'Yes'")
            ->andwhere('u.universityStatus = ' . "'Activated'")
            ->andwhere('u.universityName LIKE :query ')
            ->setParameter('query', '%' . $searchQuery . '%')

            ->getQuery()
            ->getSingleScalarResult();

    }


    function getAllDeactivatedUniversitiesSearchResult($searchQuery, $pageNumber, $pageSize, $sort)
    {
        $firstResult = ($pageNumber - 1) * $pageSize;
        $qb = $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select("u.id as universityId,
                      u.universityName,
                      u.universityUrl,
                      u.universityStatus,
                      u.adminApproved,
                      u.creationDateTime")

            ->from('AppBundle:University', 'u')
            ->andwhere('u.adminApproved = ' . "'Yes'")
            ->andwhere('u.universityStatus = ' . "'Deactivated'")
            ->andwhere('u.universityName LIKE :query ')
            ->setParameter('query', '%' . $searchQuery . '%');


        foreach ($sort as $key => $value) {
            $qb->addOrderBy("u." . $key, $value);
        }


        return $qb->setMaxResults($pageSize)
            ->setFirstResult($firstResult)
            ->getQuery()
            ->getResult();
    }

    function getAllDeactivatedUniversitiesSearchNumber($searchQuery)
    {
        return $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select("count(u)")

            ->from('AppBundle:University', 'u')
            ->andwhere('u.adminApproved = ' . "'Yes'")
            ->andwhere('u.universityStatus = ' . "'Deactivated'")
            ->andwhere('u.universityName LIKE :query ')
            ->setParameter('query', '%' . $searchQuery . '%')

            ->getQuery()
            ->getSingleScalarResult();

    }

    function approveUniversities($universities)
    {
        $conditions = array();
        foreach ($universities as $university) {
            array_push($conditions, "u.id = '" . $university['universityId'] . "'");
        }

        $queryBuilderUser = $this->getEntityManager()->createQueryBuilder('u');


        $queryBuilderUser
            ->update('AppBundle:University', 'u')
            ->set('u.adminApproved', "'Yes'")
            ->set('u.universityStatus', "'" . $university['universityStatus'] . "'");

        $orX = $queryBuilderUser->expr()->orX();
        $orX->addMultiple($conditions);
        $queryBuilderUser->add('where', $orX);


        return $queryBuilderUser->getQuery()->execute();
    }

    function getSimilarUniversitiesSearchResult($searchQuery, $pageNumber, $pageSize, $sort)
    {

        //Strip unimportant keywords
        $searchQuery = explode(" ", strtolower($searchQuery));
        $searchArray = array();
        foreach ($searchQuery as $word) {
            if (strlen($word) > 2 && strcmp("university", $word)) {
                array_push($searchArray, $word);
            }
        }
        $finalArray = array();

        for ($i = 0; $i < count($searchArray); $i++) {
            $finalArray['search_' . $i] = "%" . $searchArray[$i] . "%";
        }


        $conditions = array();
        foreach ($finalArray as $key => $value) {
            array_push($conditions, "u.universityName LIKE :" . $key);
        }


        $firstResult = ($pageNumber - 1) * $pageSize;
        $qb = $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select("u.id as universityId,
                      u.universityName,
                      u.universityUrl,
                      u.universityStatus,
                      u.adminApproved,
                      u.creationDateTime")

            ->from('AppBundle:University', 'u')
            ->andwhere('u.adminApproved = ' . "'Yes'")
            ->andwhere('u.universityStatus = ' . "'Activated'");

        $orX = $qb->expr()->orX();
        $orX->addMultiple($conditions);
        $qb->setParameters($finalArray);
        $qb->andWhere($orX);

        foreach ($sort as $key => $value) {
            $qb->addOrderBy("u." . $key, $value);
        }


        return $qb->setMaxResults($pageSize)
            ->setFirstResult($firstResult)
            ->getQuery()
            ->getResult();
    }

    function getSimilarUniversitiesSearchNumber($searchQuery)
    {
        //Strip unimportant keywords
        $searchQuery = explode(" ", strtolower($searchQuery));
        $searchArray = array();
        foreach ($searchQuery as $word) {
            if (strlen($word) > 2 && strcmp("university", $word)) {
                array_push($searchArray, $word);
            }
        }
        $finalArray = array();

        for ($i = 0; $i < count($searchArray); $i++) {
            $finalArray['search_' . $i] = "%" . $searchArray[$i] . "%";
        }


        $conditions = array();
        foreach ($finalArray as $key => $value) {
            array_push($conditions, "u.universityName LIKE :" . $key);
        }

        $qb = $this->getEntityManager()
            ->createQueryBuilder('u')
            ->select("count(u)")

            ->from('AppBundle:University', 'u')
            ->andwhere('u.adminApproved = ' . "'Yes'")
            ->andwhere('u.universityStatus = ' . "'Activated'")
            ->setParameters($finalArray);

        $orX = $qb->expr()->orX();
        $orX->addMultiple($conditions);
        $qb->setParameters($finalArray);
        $qb->andWhere($orX);


        return $qb->getQuery()
            ->getSingleScalarResult();

    }


    function getTotalActiveUniversityUserData($pageSize, $pageNumber, $searchQuery)
    {
        $firstResult = ($pageNumber - 1) * $pageSize;
        $sql = "SELECT COUNT(users.id) as count, universities.university_name as universityName,universities.id as universityId
from universities
left join campuses on universities.id = campuses.university_id
left join (SELECT * from users where registration_status='complete' and enabled = 1) as users on users.campus_id  = campuses.id

WHERE universities.university_name like '%" . $searchQuery . "%' and
universities.university_status='Activated'
and campuses.campus_status='Activated'


group by universities.id ORDER by COUNT(users.id) DESC, universities.university_name asc LIMIT " . $firstResult . "," . $pageSize . ";";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();

    }

    function getTotalActiveUniversityUserNumberData($searchQuery)
    {

        $sql = "SELECT COUNT(users.id) as count, universities.university_name,universities.id as university_id
from universities
left join campuses on universities.id = campuses.university_id
left join (SELECT * from users where registration_status='complete' and enabled = 1) as users on users.campus_id  = campuses.id

WHERE universities.university_name like '%" . $searchQuery . "%' and
universities.university_status='Activated'
and campuses.campus_status='Activated'


group by universities.id ORDER by COUNT(users.id) DESC, universities.university_name asc ;";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        return $stmt->rowCount();

    }

    function getTotalActiveUniversityCountData()
    {
        $sql = "SELECT COUNT(universities.id) as count
from universities
left join campuses on universities.id = campuses.university_id
WHERE universities.university_status='Activated'
and campuses.campus_status='Activated'
group by universities.id ;";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        return $stmt->rowCount();

    }


}
